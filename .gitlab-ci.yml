image: docker:19.03.12

variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end"
  DOCKER_IMAGE: "registry.gitlab.com/parrot55/devops-webapp:latest"
  
services:
  - docker:19.03.12-dind

# Cache the Maven repository so that each job does not have to download it.
cache:
  key: mavenrepo
  paths:
    - ./.m2/repository/

stages:
  - build
  - release
  - create_docker_image
  - push_docker_image

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Run tests.
build:
  stage: build
  image: maven:3.6.1-jdk-11
  before_script:
      # Remove the SNAPSHOT from the project's version thus creating the release version number.
    - 'mvn $MAVEN_CLI_OPTS versions:set -DremoveSnapshot -DprocessAllModules=true'
    - 'export RELEASE_VERSION=$(mvn --batch-mode --no-transfer-progress --non-recursive help:evaluate -Dexpression=project.version | grep -v "\[.*")'
    - 'echo "Release version: $RELEASE_VERSION"'
  script:
    - 'mvn $MAVEN_CLI_OPTS install'
  artifacts:
    paths:
      - target/devops-webapp*.jar

# Build a Docker image.
# Action can be manually triggered in the GitLab CI/CD pipeline
# of release tags.
create-docker-image:
  stage: create_docker_image
  script:
    - docker build -f src/main/docker/Dockerfile -t $DOCKER_IMAGE .

# Push the Docker image to a repository.
# In this example the repository is DockerHub.
push-docker-image:
  stage: push_docker_image
  script:
    - docker push $DOCKER_IMAGE